tmp<-bquote(alpha==.(round(alpha[i],3)))
text(x=-0.7,y=1.2*alpha[i],tmp,pos=4,cex=0.8)
}
points(1:length(alpha),geo_mean.alpha,pch=21,bg="white",cex=1.5)
alpha<-sort(unique(alphaRESULTS[,"alpha"]))
alpha
options(scipen=6)
load("data/alphaRESULTS.rda")
alpha<-sort(unique(alphaRESULTS[,"alpha"]))
geo_mean.alpha<-vector()
for(i in 1:length(alpha)){
geo_mean.alpha[i]<-exp(mean(log(
alphaRESULTS[alphaRESULTS[,"alpha"]==alpha[i],"est.alpha"])))
}
alphaRESULTS[alphaRESULTS[,"est.alpha"]>100,"est.alpha"]<-100
par(bty="n",mfrow=c(1,2),mar=c(5.1,4.1,2.1,1.1))
obj<-boxplot(alphaRESULTS[,"est.alpha"]~as.factor(alphaRESULTS[,"alpha"]),log="y",
bty="n",xlab=expression(paste(alpha," shape parameter")),
ylab=expression(paste("estimated value of ",alpha)),las=1,cex.axis=0.8,
xlim=c(-0.5,6.5),ylim=c(0.1,100))
abline(h=alpha,lty="dashed",col="blue")
boxplot(alphaRESULTS[,"est.alpha"]~as.factor(alphaRESULTS[,"alpha"]),log="y",
add=TRUE,cex=1.2,pch=21,bg="grey",las=1,cex.axis=0.8)
for(i in 1:length(alpha)){
tmp<-bquote(alpha==.(round(alpha[i],3)))
text(x=-0.7,y=1.2*alpha[i],tmp,pos=4,cex=0.8)
}
points(1:length(alpha),geo_mean.alpha,pch=21,bg="white",cex=1.5)
par(lend=2)
legend("topleft",c(
expression(paste("generating value of ",alpha)),
expression(paste("median estimated value of ",alpha)),
expression(paste("geometric mean estimated ",alpha))),
lwd=c(1,3,NA),col=c("blue","black","black"),
lty=c("dashed","solid",NA),bty="n",cex=0.8,
pch=c(NA,NA,21),pt.bg=c(NA,NA,"white"),pt.cex=c(NA,NA,1.2))
mtext("A",line=0.5,adj=-0.1,font=2,cex=1.5)
foo<-function(p) qchisq(p,df=1,lower.tail=FALSE)/2
boxplot(foo(alphaRESULTS[,"P"])~as.factor(alphaRESULTS[,"alpha"]),
bty="n",xlab=expression(paste(alpha," shape parameter")),
ylab=expression(paste(Delta," log(L)")),las=1,cex.axis=0.8,
xlim=c(-0.5,6.5),cex=1.2,pch=21,bg="grey")
abline(h=foo(0.05),lty="dashed",lwd=1,col="red")
boxplot(foo(alphaRESULTS[,"P"])~as.factor(alphaRESULTS[,"alpha"]),
bty="n",xlab=expression(paste(alpha," shape parameter")),
ylab=expression(paste(Delta," log(L)")),las=1,cex.axis=0.8,
xlim=c(-0.5,6.5),add=TRUE,cex=1.2,pch=21,bg="grey")
legend("topright",c("threshold for statistical significance",
expression(paste("median ",Delta,"  log(L)"))),
lwd=c(1,3),col=c("red","black"),cex=0.8,lty=c("dashed","solid"),
bty="n")
mtext("B",line=0.5,adj=-0.1,font=2,cex=1.5)
library(phytools)
par(mfrow=c(1,2))
library(RColorBrewer)
cols<-brewer.pal(6,"Dark2")
x<-seq(0,4,length.out=200)
G0.25<-dgamma(x,0.25,0.25)
G0.5<-dgamma(x,0.5,0.5)
G1.0<-dgamma(x,1,1)
G2.0<-dgamma(x,2,2)
G4.0<-dgamma(x,4,4)
G8.0<-dgamma(x,10,10)
par(mar=c(5.1,4.1,2.1,1.1))
plot(x,G0.25,type="l",bty="n",
ylab="density",xlab="relative rate",
las=1,col=cols[1],lwd=2)
lines(x,G0.5,col=cols[2],lwd=2)
lines(x,G1.0,col=cols[3],lwd=2)
lines(x,G2.0,col=cols[4],lwd=2)
lines(x,G4.0,col=cols[5],lwd=2)
lines(x,G8.0,col=cols[6],lwd=2)
legend("topright",c(
expression(alpha==0.25),
expression(alpha==0.5),
expression(alpha==1.0),
expression(alpha==2.0),
expression(alpha==4.0),
expression(alpha==8.0)
),cex=0.9,
lwd=2,col=cols,bty="n")
mtext("A",line=0.5,adj=-0.1,font=2,cex=1.5)
tree<-read.tree(text="((A:1.0,B:1.0):1);")
plotTree(tree,offset=0.5,lwd=6,fsize=2,
xlim=c(0.75,2.25),
ylim=c(-0.3,2.25),
ftype="off",mar=c(1.1,4.1,2.1,1.1),
direction="upwards")
text(x=c(1,2),y=c(2,2)+0.25,tree$tip.label,font=3,
cex=2)
points(x=c(1,2),y=c(2,2),cex=3,pch=21,
bg=c("black","white"))
text(x=c(1,2),y=c(2,2),0:1,col=c("white","black"))
points(x=c(1.44,1.56),y=c(-0.1,-0.1),cex=3,pch=21,
bg=c("black","white"))
text(x=c(1.44,1.56),y=c(-0.1,-0.1),0:1,col=c("white","black"))
text(x=1.5,y=-0.15,",",cex=1.5)
points(x=c(1.44,1.56),y=c(1.1,1.1),cex=3,pch=21,
bg=c("black","white"))
text(x=c(1.44,1.56),y=c(1.1,1.1),0:1,col=c("white","black"))
text(x=1.5,y=1.05,",",cex=1.5)
text(x=1.5,y=0.5,expression('t'[A][B]),font=3,pos=2)
text(x=1,y=1.5,expression('t'[A]),font=3,pos=2)
text(x=2,y=1.5,expression('t'[B]),font=3,pos=2)
mtext("B",line=0.5,adj=-0.1,font=2,cex=1.5)
alpha<-0.7
nrates<-3 # number of rate categories
r<-qgamma(seq(1/(2*nrates),1,by=1/nrates),
alpha,alpha)
r<-r/mean(r)
E<-as.matrix(
expand.grid(replicate(nrow(tree$edge),
1:nrates,simplify=FALSE)))
foo<-function(ind,tree,r){
tree$edge.length<-tree$edge.length*r[ind]
tree
}
rate_trees<-apply(E,1,foo,tree=tree,r=r)
Q<-matrix(c(-1,1,1,-1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))/10
x<-setNames(c(0,1),LETTERS[1:2])
lik<-sapply(rate_trees,function(t,x,Q)
exp(logLik(fitMk(t,x,fixedQ=Q))),
x=x,Q=Q)
lik<-lik
col_func<-function(x){
rgb<-colorRamp(viridisLite::viridis(n=10))(x)
make.transparent(
rgb(rgb[1],rgb[2],rgb[3],maxColorValue=255),0.5)
}
vv<-c(1,1,2,2,3,3,4,4,5,5,6,6)
mat<-matrix(
c(vv,vv+6,vv+12,vv+18,29,29,29,vv[1:6]+24,29,29,29,rep(28,12)),
6,12,byrow=TRUE)
layout(mat)
for(i in 1:length(rate_trees)){
plotTree(rate_trees[[i]],fsize=0.5,lwd=1,plot=FALSE,
mar=rep(0,4),
ylim=1.1*c(0,max(r)*max(nodeHeights(tree))),
xlim=c(0,Ntip(tree)+1),direction="upwards")
pp<-get("last_plot.phylo",envir=.PlotPhyloEnv)
polygon(par()$usr[c(1,2,2,1)],par()$usr[c(3,3,4,4)],
col=col_func((lik[i]-min(lik))/diff(range(lik))),
border=FALSE)
plotTree(rate_trees[[i]],ftype="off",lwd=1,add=TRUE,
ylim=1.1*c(0,max(r)*max(nodeHeights(tree))),
xlim=c(0,Ntip(tree)+1),
direction="upwards")
points(pp$xx[1:2],pp$yy[1:2]+min(r)*min(tree$edge.length),
pch=21,bg=c("black","white"),
cex=2)
}
plot(NA,xlim=c(-1,1),ylim=c(-1,1),mar=rep(0,4),axes=FALSE,
bty="n")
options(scipen=6)
add.color.bar(1.6,cols=viridisLite::viridis(n=100),
title="probability of the data",lims=range(lik),digits=5,lwd=5,
subtitle="under each set of rates among edges",prompt=FALSE,
x=-0.8,y=0,fsize=1.3)
alphaRESULTS[alphaRESULTS[,"alpha"]==8,]
alphaRESULTS[alphaRESULTS[,"alpha"]==8,"P"]
alphaRESULTS[alphaRESULTS[,"alpha"]==8,"P"]<=0.05
sum(alphaRESULTS[alphaRESULTS[,"alpha"]==8,"P"]<=0.05)
sum(alphaRESULTS[alphaRESULTS[,"alpha"]==4,"P"]<=0.05)
library(phytools)
library(phytools)
load("data/alphaRESULTS.rda")
rm(rates,trees,x)
set.seed(99)
library(foreach)
library(parallel)
library(doParallel)
lr.test<-function(obj1,obj2){
l1<-logLik(obj1)
l2<-logLik(obj2)
LR<-2*(l2-l1)
as.numeric(
pchisq(LR,df=attr(l2,"df")-attr(l1,"df"),
lower.tail=FALSE))
}
niter<-2 #10
nrep<-10 #100
ntaxa<-c(50,100,200,400,800,1600)
## set number of cores to use
ncores<-min(c(parallel::detectCores()-2,
niter))
## create parallel socket cluster
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
powerRESULTS<-matrix(NA,
nrep*(length(ntaxa)+1),6,
dimnames=list(1:(nrep*(length(ntaxa)+1)),
c("N","est.alpha","est.q","logL","logL(null)","P")))
rm(powerRESULTS)
typeIerrorRESULTS<-matrix(NA,
nrep*(length(ntaxa)+1),6,
dimnames=list(1:(nrep*(length(ntaxa)+1)),
c("N","est.alpha","est.q","logL","logL(null)","P")))
head(typeIerrorRESULTS)
## generate Q matrix for simulation
Q<-matrix(c(
-0.5, 0.5, 0.0,
0.5,-1.0, 0.5,
0.0, 0.5,-0.5),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## design matrix of model
MODEL<-matrix(c(
0,1,0,
1,0,1,
0,1,0),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
i
i<-1
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
j<-1
## simulate data
x<-sim.Mk(trees[[j]],Q)
x<-to.matrix(x,letters[1:ncol(Q)])
plotTree(trees[[j]],ftype="off",lwd=1,mar=c(1.1,1.1,4.1,1.1))
tmp<-bquote('N'==.(round(ntaxa[j]))~','~alpha==.(round(alpha[i],3)))
title(main=tmp)
alpha
tmp<-bquote('N'==.(round(ntaxa[j]))~','~alpha==Inf))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(symbol("\u221E")))
title(main=tmp)
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(symbol("\u221E")))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(quote(infinity)))
title(main=tmp)
fits<-foreach(l=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitgammaMk(trees[[k]],x,model=MODEL,
min.alpha=0.001,pi="fitzjohn",rand_start=TRUE,nrates=8))
}
result
}
stopCluster(cl=mc)
library(phytools)
load("data/alphaRESULTS.rda")
rm(rates,trees,x)
set.seed(99)
library(foreach)
library(parallel)
library(doParallel)
lr.test<-function(obj1,obj2){
l1<-logLik(obj1)
l2<-logLik(obj2)
LR<-2*(l2-l1)
as.numeric(
pchisq(LR,df=attr(l2,"df")-attr(l1,"df"),
lower.tail=FALSE))
}
niter<-2 #10
nrep<-10 #100
ntaxa<-c(50,100,200,400,800,1600)
## set number of cores to use
ncores<-min(c(parallel::detectCores()-2,
niter))
## create parallel socket cluster
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
typeIerrorRESULTS<-matrix(NA,
nrep*(length(ntaxa)+1),6,
dimnames=list(1:(nrep*(length(ntaxa)+1)),
c("N","est.alpha","est.q","logL","logL(null)","P")))
## generate Q matrix for simulation
Q<-matrix(c(
-0.5, 0.5, 0.0,
0.5,-1.0, 0.5,
0.0, 0.5,-0.5),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## design matrix of model
MODEL<-matrix(c(
0,1,0,
1,0,1,
0,1,0),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
trees
i
j
## simulate data
x<-sim.Mk(trees[[j]],Q)
x
x<-to.matrix(x,letters[1:ncol(Q)])
plotTree(trees[[j]],ftype="off",lwd=1,mar=c(1.1,1.1,4.1,1.1))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(quote(infinity)))
title(main=tmp)
fits<-foreach(l=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitgammaMk(trees[[k]],x,model=MODEL,
min.alpha=0.001,pi="fitzjohn",rand_start=TRUE,nrates=8))
}
result
}
k
plotTree(trees[[j]],ftype="off",lwd=1,mar=c(1.1,1.1,4.1,1.1))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(quote(infinity)))
title(main=tmp)
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitgammaMk(trees[[j]],x,model=MODEL,
min.alpha=0.001,pi="fitzjohn",rand_start=TRUE,nrates=8))
}
result
}
logL<-sapply(fits,logLik)
logL
best_fit<-fits[[which(logL==max(logL))[1]]]
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitMk(trees[[j]],x,model=MODEL,
pi="fitzjohn",rand_start=TRUE))
}
result
}
logL<-sapply(fits,logLik)
fit_null<-fits[[which(logL==max(logL))[1]]]
(i-1)*nrep+j
c(ntaxa[j],best_fit$alpha,best_fit$rates,
logLik(best_fit),logLik(fit_null),
lr.test(fit_null,best_fit))
if(((i-1)*nrep+j)>20) ii<-((i-1)*nrep+j)-19:0
ii<-1:((i-1)*nrep+j)
ii
print(round(typeIerrorRESULTS[ii,],5))
print(round(typeIerrorRESULTS[ii,,drop=FALSE],5))
typeIerrorRESULTS[(i-1)*nrep+j,]<-
c(ntaxa[j],best_fit$alpha,best_fit$rates,
logLik(best_fit),logLik(fit_null),
lr.test(fit_null,best_fit))
if(((i-1)*nrep+j)>20) ii<-((i-1)*nrep+j)-19:0
else ii<-1:((i-1)*nrep+j)
print(round(typeIerrorRESULTS[ii,,drop=FALSE],5))
stopCluster(cl=mc)
library(phytools)
set.seed(99)
library(foreach)
library(parallel)
library(doParallel)
lr.test<-function(obj1,obj2){
l1<-logLik(obj1)
l2<-logLik(obj2)
LR<-2*(l2-l1)
as.numeric(
pchisq(LR,df=attr(l2,"df")-attr(l1,"df"),
lower.tail=FALSE))
}
niter<-2 #10
nrep<-2 #100
ntaxa<-c(50,100,200,400,800,1600)
## set number of cores to use
ncores<-min(c(parallel::detectCores()-2,
niter))
## create parallel socket cluster
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
typeIerrorRESULTS<-matrix(NA,
nrep*(length(ntaxa)+1),6,
dimnames=list(1:(nrep*(length(ntaxa)+1)),
c("N","est.alpha","est.q","logL","logL(null)","P")))
## generate Q matrix for simulation
Q<-matrix(c(
-0.5, 0.5, 0.0,
0.5,-1.0, 0.5,
0.0, 0.5,-0.5),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## design matrix of model
MODEL<-matrix(c(
0,1,0,
1,0,1,
0,1,0),3,3,
dimnames=list(letters[1:3],letters[1:3]))
for(i in 1:length(ntaxa)){
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
for(j in 1:nrep){
## simulate data
x<-sim.Mk(trees[[j]],Q)
x<-to.matrix(x,letters[1:ncol(Q)])
plotTree(trees[[j]],ftype="off",lwd=1,mar=c(1.1,1.1,4.1,1.1))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(quote(infinity)))
title(main=tmp)
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitgammaMk(trees[[j]],x,model=MODEL,
min.alpha=0.001,pi="fitzjohn",rand_start=TRUE,nrates=8))
}
result
}
logL<-sapply(fits,logLik)
best_fit<-fits[[which(logL==max(logL))[1]]]
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitMk(trees[[j]],x,model=MODEL,
pi="fitzjohn",rand_start=TRUE))
}
result
}
logL<-sapply(fits,logLik)
fit_null<-fits[[which(logL==max(logL))[1]]]
typeIerrorRESULTS[(i-1)*nrep+j,]<-
c(ntaxa[j],best_fit$alpha,best_fit$rates,
logLik(best_fit),logLik(fit_null),
lr.test(fit_null,best_fit))
if(((i-1)*nrep+j)>20) ii<-((i-1)*nrep+j)-19:0
else ii<-1:((i-1)*nrep+j)
print(round(typeIerrorRESULTS[ii,,drop=FALSE],5))
cat("\n")
}
}
stopCluster(cl=mc)
library(phytools)
set.seed(99)
library(foreach)
library(parallel)
library(doParallel)
lr.test<-function(obj1,obj2){
l1<-logLik(obj1)
l2<-logLik(obj2)
LR<-2*(l2-l1)
as.numeric(
pchisq(LR,df=attr(l2,"df")-attr(l1,"df"),
lower.tail=FALSE))
}
niter<-2 #10
nrep<-2 #100
ntaxa<-c(50,100,200,400,800,1600)
## set number of cores to use
ncores<-min(c(parallel::detectCores()-2,
niter))
## create parallel socket cluster
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
typeIerrorRESULTS<-matrix(NA,
nrep*(length(ntaxa)+1),6,
dimnames=list(1:(nrep*(length(ntaxa)+1)),
c("N","est.alpha","est.q","logL","logL(null)","P")))
## generate Q matrix for simulation
Q<-matrix(c(
-0.5, 0.5, 0.0,
0.5,-1.0, 0.5,
0.0, 0.5,-0.5),3,3,
dimnames=list(letters[1:3],letters[1:3]))
## design matrix of model
MODEL<-matrix(c(
0,1,0,
1,0,1,
0,1,0),3,3,
dimnames=list(letters[1:3],letters[1:3]))
for(i in 1:length(ntaxa)){
## generate random tree(s)
trees<-pbtree(n=ntaxa[i],scale=10,nsim=nrep)
for(j in 1:nrep){
## simulate data
x<-sim.Mk(trees[[j]],Q)
x<-to.matrix(x,letters[1:ncol(Q)])
plotTree(trees[[j]],ftype="off",lwd=1,mar=c(1.1,1.1,4.1,1.1))
tmp<-bquote('N'==.(round(ntaxa[j]))*","~alpha==.(quote(infinity)))
title(main=tmp)
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitgammaMk(trees[[j]],x,model=MODEL,
min.alpha=0.001,pi="fitzjohn",rand_start=TRUE,nrates=8))
}
result
}
logL<-sapply(fits,logLik)
best_fit<-fits[[which(logL==max(logL))[1]]]
fits<-foreach(k=1:niter)%dopar%{
result<-NA
class(result)<-"try-error"
while(inherits(result,"try-error")){
result<-try(phytools::fitMk(trees[[j]],x,model=MODEL,
pi="fitzjohn",rand_start=TRUE))
}
result
}
logL<-sapply(fits,logLik)
fit_null<-fits[[which(logL==max(logL))[1]]]
typeIerrorRESULTS[(i-1)*nrep+j,]<-
c(ntaxa[i],best_fit$alpha,best_fit$rates,
logLik(best_fit),logLik(fit_null),
lr.test(fit_null,best_fit))
if(((i-1)*nrep+j)>20) ii<-((i-1)*nrep+j)-19:0
else ii<-1:((i-1)*nrep+j)
print(round(typeIerrorRESULTS[ii,,drop=FALSE],5))
cat("\n")
}
}
stopCluster(cl=mc)
R.version()
R.version
